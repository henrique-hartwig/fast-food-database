name: 'Terraform Deploy'

on:
  pull_request:
    branches:
      - master
    types: [opened, synchronize, reopened]
  push:
    branches:
      - master
      - develop

env:
  AWS_REGION: us-east-1
  PROJECT_NAME: fastfood
  DB_USERNAME: postgres
  DB_PORT: 5432
  DB_NAME: fastfood
  TF_WORKSPACE: production

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: "1.7.0"

    - name: Setup Environment Variables
      env:
        DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      run: |
        echo "TF_VAR_db_username=${{ env.DB_USERNAME }}" >> $GITHUB_ENV
        echo "TF_VAR_db_password=$DB_PASSWORD" >> $GITHUB_ENV
        echo "TF_VAR_db_port=${{ env.DB_PORT }}" >> $GITHUB_ENV
        echo "TF_VAR_db_name=${{ env.DB_NAME }}" >> $GITHUB_ENV

    - name: Terraform Init
      id: init
      run: |
        cat <<EOF > backend.conf
        bucket="fastfood-db-terraform-state"
        key="infra/state.tfstate"
        region="us-east-1"
        EOF

        terraform init -backend-config=backend.conf

    - name: Terraform Format
      id: fmt
      run: terraform fmt -check
      continue-on-error: true

    - name: Terraform Plan
      id: plan
      run: terraform plan -no-color -input=false -out=tfplan
      continue-on-error: true

    - name: Update Pull Request
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style ðŸ–Œ\`${{ steps.fmt.outcome }}\`
          #### Terraform Plan ðŸ“–\`${{ steps.plan.outcome }}\`
          
          <details><summary>Show Plan</summary>
          
          \`\`\`\n
          ${process.env.PLAN}
          \`\`\`
          
          </details>`;
            
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })

    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1

    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: terraform apply -auto-approve tfplan